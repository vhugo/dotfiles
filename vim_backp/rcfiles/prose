" Prose (blogging, readmes, any other markdown) configurations
"------------------------

" Setup spell checking, and use <Ctrl>s to open spelling completion menu
au filetype markdown call MarkdownMode()

if exists("+spelllang")
    set spelllang=en_us
endif
set spellfile=~/.vim/spell/en.utf-8.add

function! WrapCurrentWord(format)
  normal! gv
  if a:format == 'bold'
    let wrapping = '**'
  else
    let wrapping = '_'
  endif

  execute 'normal! "ac' . wrapping . 'a' . wrapping
endfunction

vnoremap <C-b> :call WrapCurrentWord("bold")<cr>
vnoremap <C-i> :call WrapCurrentWord("italic")<cr>

function! MarkdownMode()
  " Goyo 120
  set background=light
  colorscheme pencil
  let g:vimroom_background = 'white'
  setlocal cursorline
  setlocal spell        " Enable spell checking
  setlocal wrap       " Let long lines scroll off
  setlocal linebreak    " Use word boundaries to break lines
  setlocal textwidth=80
  setlocal isk-=.       " sh.vim syntax file seems to be setting this...

  call setwinvar(0, '&statusline', '')
  call settabwinvar(0, 1, '&statusline', '')
  call settabwinvar(0, 2, '&statusline', '')
  call settabwinvar(0, 3, '&statusline', '')
  call settabwinvar(0, 4, '&statusline', '')

  execute "highlight VertSplit ctermbg=15, ctermfg=15"
  execute "highlight StatusLine ctermbg=15, ctermfg=15"
  execute "highlight StatusLineNC ctermbg=15, ctermfg=15"

  nnoremap <leader>bl :BoldListItems<cr>
  nnoremap <buffer> <leader>ns ]s
  " nnoremap <buffer> <leader>sp ea<C-x><C-s>
  nnoremap <buffer> <leader>sf mm[s1z=`m
  nnoremap <buffer> <LEADER>more i<!--more--><ESC>
  nnoremap <buffer> <leader>gf gqip
  nnoremap <buffer> <leader>md :call OpenCurrentFileInMarked()<cr>
  nnoremap <buffer> <leader>bld mm"bciw**b**<esc>`m2l
  nnoremap <buffer> <leader>em mm"bciw*b*<esc>`m2l
  nnoremap <buffer> <cr> :MarkdownAwareGX<cr>
  " nnoremap <buffer> <leader>dp :call system("open -a Deckset <C-r>%")<cr>
  command! BlockQuotify execute "normal! {jvip\<C-v>I> \<ESC>gqip"
  nnoremap <buffer> <leader>gq :BlockQuotify<cr>
  vmap <leader>gq :g/\(^$\n\)\@<=.*/BlockQuotify<cr>

  " Heading / underline funcitons
  nnoremap <buffer> <leader>u1 mmyypVr=`m<cr><esc>
  nnoremap <buffer> <leader>u2 mmyypVr-`m<cr><esc>
  nnoremap <buffer> <leader>u3 mm0i### <esc>`m4l
  nnoremap <buffer> <tab> :JumpToNextLink<cr>
  nnoremap <buffer> <S-tab> :JumpToNextLinkBackward<cr>
  nnoremap <buffer> <leader>fw mm1z=`m
  nnoremap <buffer> <leader>df :call system('open dict://'. expand('<cword>'))<cr>
endfunction

function! s:BoldListItems()
  let saved_cursor = getpos(".")
  normal! vip
  :'<,'>substitute/\v^(\s*)- (.{-}) -/\1- **\2** -/g
  " let previous_blank_line = search('^$', 'bn')
  " let target_line = previous_blank_line + a:position - 1
  " execute "move " . target_line
  call setpos('.', saved_cursor)
endfunction
command! BoldListItems call <sid>BoldListItems()

function! s:JumpToNextLink(direction)
  let link_pattern = '\v\[\S.{-}\n?.{-}\]\[\]'
  call s:ShiftCursorColumn(-1) " in case we are currently in a link
  let link_found = search(link_pattern, a:direction)
  if link_found
    nohlsearch
    call s:ShiftCursorColumn(1)
  endif
endfunction
command! JumpToNextLink call <SID>JumpToNextLink('')
command! JumpToNextLinkBackward call <SID>JumpToNextLink('b')

function! s:ShiftCursorColumn(columns)
  let position = getpos('.')[1:3]
  let position[1] += a:columns
  call cursor(position)
endfunction

function! OpenCurrentFileInMarked() abort
  write
  let current_file = expand('%')
  let open_cmd = join(["open -a Marked", current_file])
  call system(open_cmd)
endfunction
command! OpenCurrentFileInMarked call OpenCurrentFileInMarked()

function! MoveEm(position)
  let saved_cursor = getpos(".")
  let previous_blank_line = search('^$', 'bn')
  let target_line = previous_blank_line + a:position - 1
  execute "move " . target_line
  call setpos('.', saved_cursor)
endfunction

for position in range(1, 9)
  execute "nnoremap m" . position . " :call MoveEm(" . position . ")<cr>"
endfor

function! s:RichTextCopy()
  if expand('%') == ''
    echoerr 'RichTextCopy: File must be saved to disk'
    return
  endif
  if &filetype != 'markdown'
    echoerr 'RichTextCopy: Only valid on filetype "markdown"'
    return
  endif
  if !executable('multimarkdown')
    echoerr 'RichTextCopy: multimarkdown executable required'
    return
  endif
  let rtf_convert_cmd = 'textutil -stdin -stdout -convert rtf -format html'
  let pipeline = ['cat '.expand('%'), 'multimarkdown', rtf_convert_cmd, 'pbcopy']
  call system(join(pipeline, ' | '))
  echohl String | echom 'Document copied as RTF'
endfunction

command! RichTextCopy call <sid>RichTextCopy()

function! s:FixLastSpellingError()
  let position = getpos('.')[1:3]
  let current_line_length = len(getline('.'))
  normal! [s1z=
  let new_line_length = len(getline('.'))
  let position[1] += (new_line_length - current_line_length)
  call cursor(position)
  silent! call repeat#set("\<Plug>FixLastSpellingError", 0)
endfunction
command! FixLastSpellingError call <sid>FixLastSpellingError()
nnoremap <Plug>FixLastSpellingError :FixLastSpellingError<cr>
map <leader>sp <Plug>FixLastSpellingError
imap <C-y> <C-o>:w<cr><C-o><leader>sp
" nnoremap <leader>SP uea<C-x><C-s>

" vim:ft=vim
